import attr
import random
import re


"""Attributes file"""


class Room:
    """
    Room class, handles rng generation of attributes, loot, etc.
    """

    def __init__(self) -> None:
        self.current_room = None
        """Kept none until new_room() populates it"""
        self.description = ""
        """Generated by describe_room()"""
        # self.description_search = ""
        self.loot = ""
        self.potion = ""
        """Loot and Potion are kept empty untill room_search()"""
        self.seed = 0
        """Seed is handled by new_room()"""

    def room_variables(self):
        return self.current_room

    def room_loot(self):
        """Generated in room_search()"""
        return self.loot

    def room_potion(self):
        """Generated in room_search()"""
        return self.potion

    def new_room(self) -> None:  # EX get_attr()
        """
        Pulls random items from all the attribute lists and dictionaries and
        stores them into the random_variables dictionary.

        Also sets up a 10-digit seed used to generate random values for various
        game elements that persist throughout the room instance.

        The seed is used in the following ways:

        - Room generation (Room.room_search()): the first 2 digits determine the
        likelihood of a trap door appearing, the next 2 digits determine the
        likelihood of a loot container appearing, and the next 2 digits
        determine the likelihood of a potion appearing.

        - Enemy visibility (Enemy.visibility()): the next 2 digits determine the
        likelihood of an enemy being visible to the player.

        - Enemy aggro (Enemy.aggro()): the last digit determines whether an
        enemy will become aggressive towards the player.
        """

        random_variables = {
            "room": random.choice(attr.room),
            "visibility": random.choice(attr.visibility),
            "temperature": random.choice(attr.temperature),
            "air": random.choice(attr.air),
            "humidity": random.choice(attr.humidity),
            "decoration": random.choice(attr.decoration),
            "furniture": random.choice(attr.furniture),
            "floor texture": random.choice(attr.floor_texture),
            "torch_number": random.choice(attr.torch_number),
            "torches": random.choice(attr.torches),
            "sound": random.choice(attr.sounds),
            "occupancy": random.choice(attr.occupancy),
            "search": random.choice(attr.search),
            "exits": random.sample(attr.exits, random.randrange(3, 4)),
            "trap_doors": random.choice(attr.trap_doors),
            "containers": random.choice(attr.containers),
            "enemy": random.choice(list(attr.enemies)),
            "loot": random.choice(list(attr.loot)),
            "what_in_front": random.choice(attr.what_in_front),
            "directions": random.shuffle(attr.directions),
            "no_enemy": random.choice(attr.no_enemy),
        }
        self.current_room = random_variables
        self.seed = str(random.randrange(0, 9999999999)).zfill(10)

    def describe_room(self, count, enemy_spawn):
        """Describes room, the first line doesnt get stored"""

        # If this is the first room defaults to open your eyes.
        if count == 0:
            self.description += "You open your eyes. "

        # Else selects first random string.
        else:
            self.description += f'{self.current_room["room"]}'

        s = list(self.current_room.values())[1:5]
        self.description += "".join(s)

        ## MAYBE ILL ADD THIS LATER
        #  if room is black and there are no torches make him blind for the room.
        #  stoping here because all the properties until now can be felt if player
        #  is blind.

        s = list(self.current_room.values())[5:8]
        self.description += "".join(s)

        # setting some variables to make the code easier to read
        light_source = self.current_room["torch_number"]
        light_color = self.current_room["torches"]

        if light_source != " you see no light sources.":
            s = light_source.split()[:3] + [light_color] + light_source.split()[3:]
            self.description += " ".join(s)
        else:
            self.description += "and there are no candles or torches to be seen."

        # continuing with the description.
        s = list(self.current_room.values())[10:11]
        self.description += "".join(s)

        # if there is no monster the room should feel empty
        if enemy_spawn is False:
            self.current_room["occupancy"] = random.choice(attr.occupancy_no_spawn)
        self.description += self.current_room["occupancy"]
        return self.description.strip()

    def room_search(self):
        """Searches the room for exits, items or potions"""

        exits = self.current_room["exits"]
        description_search = self.current_room["search"]
        description_search += "\033[32m\033[01mExits\033[0m. "
        for _ in range(len(exits)):
            description_search += f"You see {exits[_]} {attr.directions[_]}. "

        if self.seed[0:2] > "95":
            description_search += (
                f'You see {self.current_room["trap_doors"]} beneath you. '
            )

        if self.seed[2:4] > "50":
            description_search += "\033[93m\033[01mLoot\033[0m. "
            description_search += (
                f'You see {self.current_room["containers"]} {attr.directions[4]}. '
            )
            self.loot = re.findall(r"'(.*)'", self.current_room["containers"])
        if self.seed[4:6] > "50":
            self.potion = "red potion"
            description_search += "\033[96m\033[01mPotion\033[0m. "
            description_search += f"You see a 'red potion' {attr.directions[5]}."
        return description_search
